******************
*  doolp-1 TODO  *
******************

	- Step3 -ongoing

* doolpCC (not the 1st priority...)
	- Do not use ctags anymore : ctags dependance is a hint.
	- 1. Parse headers line by line
	- 2. Find the class keywords, build up hierarchy ?
	- 3. Find doolpfunc, doolpparam, doolplink*, and other special Doolp keywords.
	- Clean generated cpp as much as possible

* DoolpConnectionXML : optimizations
	- remove index field when equal to zero
	- Replace DoolpMessage by Call, Reply and InCall (remove type attribute)

* DoolpCall
	- Reimplement Asynchronous Calls using a clean semantics : --DONE (must heavily test it)
	- 1. Remove all Call things in DoolpContext.
	- 2. In DoolpSlot template doolpfunc<returnType,..> foo, add a DoolpCall * asyncCall(params);
	- 3. User calls async using DoolpCall * call = foo.asyncCall(..);
	- 4. User waits for recieve with call.waitCall(); (waitCall can throw exceptions)
	- 5. Return value is given with returnValue bar = foo.getReply ( call );

	- Reimplement waitSpecific using DoolpConnection --DONE
	- waitSpecific semantics :
	- 1. true : recieved call reply
	- 2. false : unable to waitSpecific : use call->waitCall() instead
	- 3. DoolpCallTimeoutException

	- DoolpCall Timeout
	- Use DoolpForgeScheduler
	- Be really carefull of DoolpCall deletion :
	- 1. finishCall() does not remove the call : the DoolpForgeScheduler will do it
	- 2. What to do when the scheduler is about to delete the call 
	- * AND we recieve the call AT THE SAME TIME ?
	- 3. This implies having a Call mutex.
	- 4. Be carefull of waitSpecific (); not in the Scheduler ?

* DoolpJob :
	- Reimplement cascaded Jobs (run job in same thread) -done
	- Implies waitSpecific
	- Problem : when cascaded from the connection handling thread,
	  what to do with the DoolpStream ? :
	- at DoolpStream::waitRecv, shall call for Context : 

* DoolpSlot Mechanism :
	- chooseAgentId : Same signature, but returns an agentId -done?
	- Other helper functions (pre- and post-condition, ...)

* DoolpForgeService : General service API
	- Implement start() and stop() general service starting/stopping
	- Service start shall not be performed in constructor
	- destructor shall check for stop()

* DoolpContext : Bind context to another Context
	- commitContext shall be a named context (?)
	- We assume that commitContext's agentId is a persistance agent.
	- bindContext ( DoolpFullContextId * commitContext )
	- 1. Set context father to commitContext
	- 2. Set commitContext field
	- 3. For each call, the commitContext will be propagated to job performer 
	- * (Optionnal ! only for preCommit())

	- preCommit() #DIFFICULT, not the first-priority.
	- 1. Used for job performer to send information to persistance and not to caller
	- 2. Used for user to prepare its commit() ?

	- commit()
	- 1. Two things to send at commit (in this order) :
	- * list of deleted objects
	- * updated parameters for each modified object (not the deleted ones !)
	- 2. the DoolpForge::commit() method uses DoolpPersistance::commit()
	- 3. DoolpPersistance::commit(DoolpStream<DoolpObjectId> deletedObjects,
				      DoolpStream<DoolpObject*> modifiedObjects);
	- 4. This implies a special call to DoolpStream :
	- * be able to serialize() the pushed object using a given list of modified params.

	- cancel()
	- 1. Clean the preCommit() stuff in the persistance

* DoolpNaming : NamedContext, NamedObject
	- Register/Retrieve a DoolpFullContextId or a DoolpObjectId from a char *
	- Be really carefull : NamedObject depends on the context -DONE

* DoolpConnectionXML : -DONE
	- Reimplement a clean optimized XML-oriented write buffer
	- Include a fast XMLization mechanism, using a table[256] for beginning of entities conversion.
	- Because most of the time, text character is not an entity

	- Reimplement clean XML structure builder (much as DMLSection did) :
	- 0. Pre-requisites : state={outside, openned, pre-closed}, markupName stack and level indicator
	- 1. writeMarkup(char * markupName) (valid states : outside, openned, pre-closed)
	- 1.a. If state=openned : Write [>]
	- 1.b. Writes [<markupName]
	- 1.c. push markupName to stack, level++, state = openned

	- 2. writeAttr(char * attrName, char * attrValue, bool xmlize) (valid state : openned)
	- 2.a. if xmlize=true : XMLize attrValue (if not, assert that attrValue does not have to be converted)
	- 2.b. Write [ attrName="attrValue"]

	- 3. writeText(char * text, bool xmlize) (valid states : openned, pre-closed)
	- 3.a. If state=openned : Write ( ">" )
	- 3.b. If state=pre-closed : nothing to do
	- 3.c. if xmlize=true : XMLize text 
	- 3.d. Write [text].

	- 4. writeMarkupEnd() (valid states : openned, pre-closed)
	- 4.a. If state=openned : Write [/>], pop stack.
	- 4.b. If state=pre-closed : markupName = pop(stack), Write [<markupName/>].
	- 4.c. If stack is empty (level=0): state=outside, else state=pre-closed

	- As a result, REIMPLEMENT all DoolpConnectionXML stuff using this framework.

* DoolpObjectLink : template for links between objects
	- We assume T_DoolpObject is of type DoolpObject*
	- Reverse Link is specified using macro DoolpObjectLink_setReverse(link name, reverse link name)
	- Doolp::ObjectLink is a virtual class, mother of ObjectUniqueLink and ObjectMultiLink :
	- addLink(ObjId, Object*), getOffsetPtr (optional), serialize, unserialize, cleanLink, removeLink(ObjectId)
	- cleanLink is responsible for keeping the ObjectId but loosing the Object ptr
	- removeLink is responsible for loosing both ObjectId and Object ptr.

	- Doolp::ObjectUniqueLink class :
	- doolpuniquelink<class T_DoolpObject> template
	- Simplest link
	- 1. serialize/unserialize : only store the DoolpObjectId
	- 2. Option : cross-context links ? (DANGEROUS)
	- 3. get the object : resolve object (using getObject) from the objectId

	- DoolpObjectMultiLink class :
	- doolpmultilink<class T_DoolpObject>
	- Store list of doolplinkviews to update :
	- 1. Each time an object is added to the doolplinkmultipe, update views.
	- 2. Implement partial update of the doolplinkmultiple...
	- 3. Association is done using a strongmap<ObjectId, Object*>
	- 4. Must set a meta-objectptr (such as 0x4) which refers to a valid ObjectId, 
	     but not associated with an ObjectId*
	

	- DoolpObjectLinkView class : parametered view of a DoolpObjectMultiLink
	- doolplinkview<class T_LinkMultipleBase,class T_DoolpObject,class T_DoolpObjectLinkFilter>
	- DoolpObjectLinkFilter : re-using existing Doolp::PubSubFilter stuff ?
	- 1. Generic class for DoolpObject filtering
	- 2. bool filter(DoolpObject *) returns true if filtered, else false.
	- 3. Most important : server-side work (where ? persistance ?)
	- 4. Which agent is responsible for view update ?
	- 5. Views only contain a (sorted ?) list of objectIds : 
	- * rely on base link for conversion to DoolpObject*

* DMLXParser :
	- Check opened/closed markups syntax using a Unique Keyword stack (std::list ?) --DONE
	- Rename NameSpace to something like StoreSpace (not storing names anymore...) --DONE

	- Implement NameSpace grow
	- 1. First step
	- 1.a. Option NameSpaceGrow disables popEvent()
	- 1.b. We assume that first will always be equal to 0
	- 2. Second step
	- 2.a. NameSpaceGrow does not disable popEvent()
	- 2.b. This can imply big holes in NameSpace

	- Change text mechanism : --DONE
	- 1. Must allow multiple text sections inside of markups
	- 2. Text sections are DMLXEvent themselves
	- 3. No attribute, only name, flag and next.
	- 4. Insert text as a valid flag
	- 5. Event type functions : isMarkup(), isText(), isEnd()
	- 6. popEventAndEnd() pops an event till the matching end (that's why we have to check syntax) --TODO !!!
	- 7. Implement getText() (only for isText() events !)

* DMLXTransform : XSLT on top of DMLXParser
	- Opportunity : implement XSLT inside of DMLXParser
	- 1. XML : Build up a Markup tree while parsing (?)
	- * 
	- 2. XSLT : Build up a more complex XSLT tree after parsing
	- 3. Convert as much keywords as possible 
	- 4. Must implement XPath

	- XPath Implementation
	- 1. Retrieve a markup list (for-each, ...), a markup, a markup value
	



***************************************************************************************************



	- Step2 -done or -#DEPRECATED

* doolpAgent :
	- DML configuration file : -done
		- Secure conf parsing
		- Define lexical and syntaxical approach
	- Distant terminal / remote access commands :
		- Define distant calls to pass commands to agent (reload lib, provide stats)

* libDoolp
- DoolpAgent :
	- Simple agentId indexing -done
	- Way things shall work :
		- agent numbering if agentId==0 and if local capabilities indexing
		- build up the struct agentId
	- Exchange DoolpAgent capabilities
- DoolpStream : - Must simplify this shit !
	- General rule 1 : Provider and consumer can be both caller or runner, at the same time :
		- Caller A calls function f to agent B with Doolpstreams
		- Elements pushed by A on s will be popped by B
		- Elements pushed by B on s will be popped by A
		- Elements pushed by an agent can not be popped by the same agent.
		-> This forces the question/answer mechanism with streams to use same object types at question & answer.
	- General rule 2 : When caller calls sync
		- No streaming end issues : streams are considerated finished when function is called (for both ways)
	- General rule 3a : When caller calls async
		- When caller calls async, it has capability push elements on the stream after the call.
		- Call will be finished (i.e. the job running will see it as finished) when all pending streams are finished.
		- Push/pop is a bidirectionnal ways of communication
		- When caller calls async, it can also pop elements from the stream after the call
		- It will recieve a separate notification of stream ending for each stream (popped all recieved elements)
		- Exception sent (optionnal) when job finished with still pending streams.
	- General rule 3b : distributed streams (streams in multiple calls)
		- Capability to imply the same stream in multiple async calls
		- When an element is pushed on the stream, it is sent through all the calls linked to the stream.
		- When popping, it will pop elements by all calls (in the chronological order they have been recieved).
		- This is not available for sync calls ?
	- General rule 4 : local cache / local content of the stream
		- Specific rules to set up the way stream elements are freed when sent
		- Sync calls does not empty streams
		- Async calls does not store elements
		- Elements are stored only when stream is not linked to any call (not applicable for the job)
	- Implement a general multiway sequential object to handle :
		- Streams :
		- List :
		- Vector :
	- Implement multiple ways to send/recieve part of the stream :
		- Sequential full send of the stream
		- On-demand retrieve of one/several elements of the stream.
	- Proposition :
		- Implement a very generic object that is able to deal about anything non-scalar.
		- For example, if a function "foo ( int bar )" is provided, this should make really easy 
			to provide a "foo ( list<int bar> )" extension.

- DoolpJob :
	- Job queueing
		- Define job priorities
		- Notify caller for his job being enqueued
	- Job context, father contexts
		- Define context inheritance
		- Define context credentials according to distant agent credentials and user.
	- Scheduling
		- use of doolpThreads as an option
		- integration with Job queues.
	- stopping & sending DoolpExceptions
	- Migrating
		-
	- Replaying
		-
	- DoolpException handling
	- Fix performance lack in forceRunInSameJob
		- When distant call is async, client sends all async calls before starting answering subcalls.
	- Sending back the modified object -> see DoolpRPC reply sheme

- DoolpCall :
	- Debug/Fix Asynchronous calls
	- Timeout management.
		- add in a timeout thread with timeout values
		- each given time, the timeout thread checks for timedout calls and sends it back
		- Implies :
		- Implement a DoolpException DoolpECallTimeout (and implement DoolpException frame ?)
		- Take care of mutexes, ..., especially for waitSpecificCall
	- Asynchronous Calls -done
		- Mechanism :
		- define a DoolpCall * asyncCall;
		- context has a DoolpCall ** _asyncCall;
		- set in context : setAsyncCall ( &asyncCall );
		- in context : isAsyncCall = true;
		- _asyncCall = &asynCall;
		- to be pushed in a context-specific list ? -> no.
	- Recieving the modified object -> see DoolpRPC reply scheme

- DoolpContext :
	- Explicit context creation for new jobs, when run in same thread -done
		- This allows creation of calls and jobs in the same thread, only when calls are not async.
		- At job creation : use DoolpForge::pushContext ();
		- At job deletion : use DoolpForge::popContext ();
	- Explicit and clever approach for context creation, sub-context creation and context termination :
		- pushContext(), popContext(), with a link to father context.
		- commitContext(), cancelContext(), to handle objects retrieved and created in this context.

- DoolpConnection :
	- Collection handling -ok
	- Connection initiation protocol (agent numbering, ...) -ongoing
	- DoolpConnection::waitSpecificCall -done
		- possibility to wait for a specific call into the caller thread.
		- to be called by the DoolpForge according to DoolpConnection capabilities
		- not valid for asynchronous calls.
		- Implies (for DoolpConnectionTCP) :
		- Disabling the default handler thread using the lockRead mechanism...
		- waitCall function returns false if could not wait this Call (not implemented, ...)
		- if waiting and timeout, throws an exception.
	- Clean interface for DoolpConnection handling based on the actual doolpconnection-tcp-handler.cpp

- DoolpForge :
	- avoid callMutex -done
	- Object requesting -ok
	- Object sending ?????
	- (agentId,contextId,stepping,objectId)->(DoolpObject *) Table -almost

- DoolpRPC :
	- Precise flags (implemented locally, accessible/how, ..)
		- Must define a clean typedef flag.
		- build up functions/macros to get flags : isImplementedLocally, isStdRPC, ...
		- call policy
	- Stronger architecture
	- Reply Scheme
		- first send (or recieve) reply flag : OK or Exception
		- if OK, process normally
		- if Exception, send (or recieve) Exception

* DoolpPreproc
- Much Cleanups, global redesign -ongoing
- Use function templates with separable arguments (as an XSL) -ongoing
- Avoid use of <doolp-preproc-macros.h> -done
- Implement object sending at end of job, and side-effect parameters sending.

* sampleA

* sampleB

* Test suite...
- Design a general test suite...


	- Step1

* libDoolp
- Little Redesign
- Introduce DoolpRPC, DoolpCall, DoolpJob :
	DoolpRPC is the RPC Model, contains callbacks, useability flags, ...
	DoolpCall refers to a distant call of a function
	DoolpJob is a locally running call for a remote host


	
