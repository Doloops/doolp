#include <DMLXDocument.h>
// Keys
DMLX::Keyword __keyword__0xed6531b("xsl:stylesheet");
DMLX::Keyword __keyword__0xc86f2a9("xsl:template");
DMLX::Keyword __keyword__0xb9e0d5a("xsl:if");
DMLX::Keyword __keyword__0x735aabf5("xmlns:xsl");
DMLX::Keyword __keyword__0x72991916("xsl:preserve-space");
DMLX::Keyword __keyword__0x657dd0e7("elements");
DMLX::Keyword __keyword__0x4148ffc6("xsl:output");
DMLX::Keyword __keyword__0x10b78238("test");
DMLX::Keyword __keyword__0x36662f1e("xsl:for-each");
DMLX::Keyword __keyword__0x18f3c9cd("xsl:otherwise");
DMLX::Keyword __keyword__0x483332f9("method");
DMLX::Keyword __keyword__0x49198152("select");
DMLX::Keyword __keyword__0x5a1fde85("xsl:apply-templates");
DMLX::Keyword __keyword__0x5c8e5a24("xsl:choose");
DMLX::Keyword __keyword__0x7149518b("match");
DMLX::Keyword __keyword__0x674c89e0("xsl:value-of");
DMLX::Keyword __keyword__0x7f077b4a("version");
DMLX::Keyword __keyword__0x7409f28b("xsl:when");

DMLX::Document * getDMLXDocument_generateCPP()
{
	DMLX::Document * document = new DMLX::Document();
	document->getHashTree()->add ( &__keyword__0xed6531b );
	document->getHashTree()->add ( &__keyword__0xc86f2a9 );
	document->getHashTree()->add ( &__keyword__0xb9e0d5a );
	document->getHashTree()->add ( &__keyword__0x735aabf5 );
	document->getHashTree()->add ( &__keyword__0x72991916 );
	document->getHashTree()->add ( &__keyword__0x657dd0e7 );
	document->getHashTree()->add ( &__keyword__0x4148ffc6 );
	document->getHashTree()->add ( &__keyword__0x10b78238 );
	document->getHashTree()->add ( &__keyword__0x36662f1e );
	document->getHashTree()->add ( &__keyword__0x18f3c9cd );
	document->getHashTree()->add ( &__keyword__0x483332f9 );
	document->getHashTree()->add ( &__keyword__0x49198152 );
	document->getHashTree()->add ( &__keyword__0x5a1fde85 );
	document->getHashTree()->add ( &__keyword__0x5c8e5a24 );
	document->getHashTree()->add ( &__keyword__0x7149518b );
	document->getHashTree()->add ( &__keyword__0x674c89e0 );
	document->getHashTree()->add ( &__keyword__0x7f077b4a );
	document->getHashTree()->add ( &__keyword__0x7409f28b );

	// Node '0x804c5e8'
	// Node 'xsl:stylesheet'
	DMLX::Node * __node__0x804c5e8 = new DMLX::Node ( &__keyword__0xed6531b );
	// Attribute 'xmlns:xsl'
	DMLX::Attribute * __attr__0x804c610 = new DMLX::Attribute ( &__keyword__0x735aabf5, "http://www.w3.org/1999/XSL/Transform" );
	__node__0x804c5e8->addAttribute ( __attr__0x804c610 );
	// Attribute 'version'
	DMLX::Attribute * __attr__0x804c650 = new DMLX::Attribute ( &__keyword__0x7f077b4a, "1.0" );
	__node__0x804c5e8->addAttribute ( __attr__0x804c650 );

	// Node '0x804c670'
	DMLX::Node * __node__0x804c670 = new DMLX::Node ( "\n\n", false );
	__node__0x804c5e8->addNode ( __node__0x804c670 );

	// Node '0x804c6a8'
	// Node 'xsl:preserve-space'
	DMLX::Node * __node__0x804c6a8 = new DMLX::Node ( &__keyword__0x72991916 );
	// Attribute 'elements'
	DMLX::Attribute * __attr__0x804c6d0 = new DMLX::Attribute ( &__keyword__0x657dd0e7, "codesection" );
	__node__0x804c6a8->addAttribute ( __attr__0x804c6d0 );
	__node__0x804c5e8->addNode ( __node__0x804c6a8 );

	// Node '0x804c6f0'
	DMLX::Node * __node__0x804c6f0 = new DMLX::Node ( "\n  ", false );
	__node__0x804c5e8->addNode ( __node__0x804c6f0 );

	// Node '0x804c728'
	// Node 'xsl:output'
	DMLX::Node * __node__0x804c728 = new DMLX::Node ( &__keyword__0x4148ffc6 );
	// Attribute 'method'
	DMLX::Attribute * __attr__0x804cf30 = new DMLX::Attribute ( &__keyword__0x483332f9, "text" );
	__node__0x804c728->addAttribute ( __attr__0x804cf30 );
	__node__0x804c5e8->addNode ( __node__0x804c728 );

	// Node '0x804cf50'
	DMLX::Node * __node__0x804cf50 = new DMLX::Node ( "\n\n  ", false );
	__node__0x804c5e8->addNode ( __node__0x804cf50 );

	// Node '0x804cf88'
	// Node 'xsl:template'
	DMLX::Node * __node__0x804cf88 = new DMLX::Node ( &__keyword__0xc86f2a9 );
	// Attribute 'match'
	DMLX::Attribute * __attr__0x804cfb0 = new DMLX::Attribute ( &__keyword__0x7149518b, "/DoolpObjects" );
	__node__0x804cf88->addAttribute ( __attr__0x804cfb0 );

	// Node '0x804cfd8'
	DMLX::Node * __node__0x804cfd8 = new DMLX::Node ( "\n/*\n  Generated by XSLT transform.\n  Version A.2.8-n23\n    * Implementing DoolpException\n    * Implementing DoolpSlot\n*/\n#define __DOOLP_INCLUDES_FOR_DOOLPCC__\n#include <doolp.h>\nusing namespace Doolp;\n/*\n    Sortie pour DoolpObjects... \n   Valeur de generateDoolpObjectsInfo : ", false );
	__node__0x804cf88->addNode ( __node__0x804cfd8 );

	// Node '0x804d120'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d120 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d148 = new DMLX::Attribute ( &__keyword__0x49198152, "@generateDoolpObjectsInfo" );
	__node__0x804d120->addAttribute ( __attr__0x804d148 );
	__node__0x804cf88->addNode ( __node__0x804d120 );

	// Node '0x804d178'
	DMLX::Node * __node__0x804d178 = new DMLX::Node ( "\n  */\n\n\n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d178 );

	// Node '0x804d1b0'
	// Node 'xsl:if'
	DMLX::Node * __node__0x804d1b0 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804d1d8 = new DMLX::Attribute ( &__keyword__0x10b78238, "@DoolpObjectsInfoExtern = 'true'" );
	__node__0x804d1b0->addAttribute ( __attr__0x804d1d8 );

	// Node '0x804d210'
	DMLX::Node * __node__0x804d210 = new DMLX::Node ( "\nextern \"C\"\n  ", false );
	__node__0x804d1b0->addNode ( __node__0x804d210 );
	__node__0x804cf88->addNode ( __node__0x804d1b0 );

	// Node '0x804d250'
	DMLX::Node * __node__0x804d250 = new DMLX::Node ( "\nbool registerDoolpObjects(Doolp::Forge * forge);\n\n  \n\n  // Code for objects :\n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d250 );

	// Node '0x804d2d0'
	// Node 'xsl:apply-templates'
	DMLX::Node * __node__0x804d2d0 = new DMLX::Node ( &__keyword__0x5a1fde85 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d2f8 = new DMLX::Attribute ( &__keyword__0x49198152, "Object" );
	__node__0x804d2d0->addAttribute ( __attr__0x804d2f8 );
	__node__0x804cf88->addNode ( __node__0x804d2d0 );

	// Node '0x804d318'
	DMLX::Node * __node__0x804d318 = new DMLX::Node ( "\n  // Code for exceptions : \n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d318 );

	// Node '0x804d368'
	// Node 'xsl:apply-templates'
	DMLX::Node * __node__0x804d368 = new DMLX::Node ( &__keyword__0x5a1fde85 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d390 = new DMLX::Attribute ( &__keyword__0x49198152, "Exception" );
	__node__0x804d368->addAttribute ( __attr__0x804d390 );
	__node__0x804cf88->addNode ( __node__0x804d368 );

	// Node '0x804d3b0'
	DMLX::Node * __node__0x804d3b0 = new DMLX::Node ( "\n\nbool registerDoolpObjects(Doolp::Forge * forge)\n{\n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d3b0 );

	// Node '0x804d418'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804d418 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d440 = new DMLX::Attribute ( &__keyword__0x49198152, "Object" );
	__node__0x804d418->addAttribute ( __attr__0x804d440 );

	// Node '0x804d460'
	// Node 'xsl:if'
	DMLX::Node * __node__0x804d460 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804d488 = new DMLX::Attribute ( &__keyword__0x10b78238, "@name != 'Doolp::Forge'" );
	__node__0x804d460->addAttribute ( __attr__0x804d488 );

	// Node '0x804d4b8'
	DMLX::Node * __node__0x804d4b8 = new DMLX::Node ( "{ ", false );
	__node__0x804d460->addNode ( __node__0x804d4b8 );

	// Node '0x804d4f0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d4f0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d518 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804d4f0->addAttribute ( __attr__0x804d518 );
	__node__0x804d460->addNode ( __node__0x804d4f0 );

	// Node '0x804d538'
	DMLX::Node * __node__0x804d538 = new DMLX::Node ( " o((Doolp::ObjectId)0); o.__initStatic ( forge ); }\n  ", false );
	__node__0x804d460->addNode ( __node__0x804d538 );
	__node__0x804d418->addNode ( __node__0x804d460 );
	__node__0x804cf88->addNode ( __node__0x804d418 );

	// Node '0x804d5a0'
	DMLX::Node * __node__0x804d5a0 = new DMLX::Node ( "\n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d5a0 );

	// Node '0x804d5d8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804d5d8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d600 = new DMLX::Attribute ( &__keyword__0x49198152, "Exception" );
	__node__0x804d5d8->addAttribute ( __attr__0x804d600 );

	// Node '0x804d620'
	DMLX::Node * __node__0x804d620 = new DMLX::Node ( "{ ", false );
	__node__0x804d5d8->addNode ( __node__0x804d620 );

	// Node '0x804d658'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d658 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d680 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804d658->addAttribute ( __attr__0x804d680 );
	__node__0x804d5d8->addNode ( __node__0x804d658 );

	// Node '0x804d6a0'
	DMLX::Node * __node__0x804d6a0 = new DMLX::Node ( " e; e.__initStatic ( forge ); }\n  ", false );
	__node__0x804d5d8->addNode ( __node__0x804d6a0 );
	__node__0x804cf88->addNode ( __node__0x804d5d8 );

	// Node '0x804d6f0'
	DMLX::Node * __node__0x804d6f0 = new DMLX::Node ( "\n  return true;\n}\n\n\n  ", false );
	__node__0x804cf88->addNode ( __node__0x804d6f0 );
	__node__0x804c5e8->addNode ( __node__0x804cf88 );

	// Node '0x804d738'
	DMLX::Node * __node__0x804d738 = new DMLX::Node ( "\n\n  ", false );
	__node__0x804c5e8->addNode ( __node__0x804d738 );

	// Node '0x804d770'
	// Node 'xsl:template'
	DMLX::Node * __node__0x804d770 = new DMLX::Node ( &__keyword__0xc86f2a9 );
	// Attribute 'match'
	DMLX::Attribute * __attr__0x804d798 = new DMLX::Attribute ( &__keyword__0x7149518b, "/DoolpObjects/Object" );
	__node__0x804d770->addAttribute ( __attr__0x804d798 );

	// Node '0x804d7c8'
	DMLX::Node * __node__0x804d7c8 = new DMLX::Node ( "\n/*\n    DoolpObject : '", false );
	__node__0x804d770->addNode ( __node__0x804d7c8 );

	// Node '0x804d810'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d810 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d838 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804d810->addAttribute ( __attr__0x804d838 );
	__node__0x804d770->addNode ( __node__0x804d810 );

	// Node '0x804d858'
	DMLX::Node * __node__0x804d858 = new DMLX::Node ( "' (nameId=", false );
	__node__0x804d770->addNode ( __node__0x804d858 );

	// Node '0x804d890'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d890 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d8b8 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804d890->addAttribute ( __attr__0x804d8b8 );
	__node__0x804d770->addNode ( __node__0x804d890 );

	// Node '0x804d8d8'
	DMLX::Node * __node__0x804d8d8 = new DMLX::Node ( ").\n    forceObjectAs = '", false );
	__node__0x804d770->addNode ( __node__0x804d8d8 );

	// Node '0x804d920'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804d920 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804d948 = new DMLX::Attribute ( &__keyword__0x49198152, "@forceObjectAs" );
	__node__0x804d920->addAttribute ( __attr__0x804d948 );
	__node__0x804d770->addNode ( __node__0x804d920 );

	// Node '0x804d970'
	DMLX::Node * __node__0x804d970 = new DMLX::Node ( "'\n */\n  ", false );
	__node__0x804d770->addNode ( __node__0x804d970 );

	// Node '0x804d9a8'
	// Node 'xsl:if'
	DMLX::Node * __node__0x804d9a8 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804d9d0 = new DMLX::Attribute ( &__keyword__0x10b78238, "@name != 'Doolp::Forge'" );
	__node__0x804d9a8->addAttribute ( __attr__0x804d9d0 );

	// Node '0x804da00'
	DMLX::Node * __node__0x804da00 = new DMLX::Node ( "\n", false );
	__node__0x804d9a8->addNode ( __node__0x804da00 );

	// Node '0x804da38'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804da38 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804da60 = new DMLX::Attribute ( &__keyword__0x49198152, "Include" );
	__node__0x804da38->addAttribute ( __attr__0x804da60 );

	// Node '0x804da80'
	DMLX::Node * __node__0x804da80 = new DMLX::Node ( "#include <", false );
	__node__0x804da38->addNode ( __node__0x804da80 );

	// Node '0x804dab8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804dab8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804dae0 = new DMLX::Attribute ( &__keyword__0x49198152, "@header" );
	__node__0x804dab8->addAttribute ( __attr__0x804dae0 );
	__node__0x804da38->addNode ( __node__0x804dab8 );

	// Node '0x804db00'
	DMLX::Node * __node__0x804db00 = new DMLX::Node ( ">\n", false );
	__node__0x804da38->addNode ( __node__0x804db00 );
	__node__0x804d9a8->addNode ( __node__0x804da38 );

	// Node '0x804db38'
	DMLX::Node * __node__0x804db38 = new DMLX::Node ( "\n", false );
	__node__0x804d9a8->addNode ( __node__0x804db38 );

	// Node '0x804db70'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804db70 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804db98 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804db70->addAttribute ( __attr__0x804db98 );
	__node__0x804d9a8->addNode ( __node__0x804db70 );

	// Node '0x804dbb8'
	DMLX::Node * __node__0x804dbb8 = new DMLX::Node ( "::", false );
	__node__0x804d9a8->addNode ( __node__0x804dbb8 );

	// Node '0x804dbf0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804dbf0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804dc18 = new DMLX::Attribute ( &__keyword__0x49198152, "@shortName" );
	__node__0x804dbf0->addAttribute ( __attr__0x804dc18 );
	__node__0x804d9a8->addNode ( __node__0x804dbf0 );

	// Node '0x804dc38'
	DMLX::Node * __node__0x804dc38 = new DMLX::Node ( " ( Doolp::ObjectId objId )\n{\n  Log ( \"Construct object with objId='0x%x'\\n\", objId );\n  objectId = objId;\n}\n", false );
	__node__0x804d9a8->addNode ( __node__0x804dc38 );
	__node__0x804d770->addNode ( __node__0x804d9a8 );

	// Node '0x804dcd8'
	DMLX::Node * __node__0x804dcd8 = new DMLX::Node ( "\nDoolp::Object * __", false );
	__node__0x804d770->addNode ( __node__0x804dcd8 );

	// Node '0x804dd18'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804dd18 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804dd40 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804dd18->addAttribute ( __attr__0x804dd40 );
	__node__0x804d770->addNode ( __node__0x804dd18 );

	// Node '0x804dd60'
	DMLX::Node * __node__0x804dd60 = new DMLX::Node ( "__constructor ( Doolp::ObjectId objId )\n{\n    Doolp::Object * obj = new ", false );
	__node__0x804d770->addNode ( __node__0x804dd60 );

	// Node '0x804ddd8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ddd8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804de00 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804ddd8->addAttribute ( __attr__0x804de00 );
	__node__0x804d770->addNode ( __node__0x804ddd8 );

	// Node '0x804de20'
	DMLX::Node * __node__0x804de20 = new DMLX::Node ( " ( objId );\n    obj->setOptions ();\n    __DOOLP_Log ( \"New Object ", false );
	__node__0x804d770->addNode ( __node__0x804de20 );

	// Node '0x804de90'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804de90 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804deb8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804de90->addAttribute ( __attr__0x804deb8 );
	__node__0x804d770->addNode ( __node__0x804de90 );

	// Node '0x804ded8'
	DMLX::Node * __node__0x804ded8 = new DMLX::Node ( " : %p\\n\", obj );\n    __DOOLP_Log ( \"Options : contextDependant=%s, ttl=%d\\n\",\n                  obj->isContextDependant () ? \"true\" : \"false\",\n                  (int) obj->getTTL () );\n    obj->__initSlots ();\n    return obj;\n}\n\n", false );
	__node__0x804d770->addNode ( __node__0x804ded8 );

	// Node '0x804dff0'
	// Node 'xsl:choose'
	DMLX::Node * __node__0x804dff0 = new DMLX::Node ( &__keyword__0x5c8e5a24 );

	// Node '0x804e018'
	DMLX::Node * __node__0x804e018 = new DMLX::Node ( "\n  ", false );
	__node__0x804dff0->addNode ( __node__0x804e018 );

	// Node '0x804e050'
	// Node 'xsl:when'
	DMLX::Node * __node__0x804e050 = new DMLX::Node ( &__keyword__0x7409f28b );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804e078 = new DMLX::Attribute ( &__keyword__0x10b78238, "@forceObjectAs" );
	__node__0x804e050->addAttribute ( __attr__0x804e078 );

	// Node '0x804e0a0'
	DMLX::Node * __node__0x804e0a0 = new DMLX::Node ( "\n// Forced as ", false );
	__node__0x804e050->addNode ( __node__0x804e0a0 );

	// Node '0x804e0e0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e0e0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e108 = new DMLX::Attribute ( &__keyword__0x49198152, "@forceObjectAs" );
	__node__0x804e0e0->addAttribute ( __attr__0x804e108 );
	__node__0x804e050->addNode ( __node__0x804e0e0 );

	// Node '0x804e130'
	DMLX::Node * __node__0x804e130 = new DMLX::Node ( "\nDoolp::ObjectNameId ", false );
	__node__0x804e050->addNode ( __node__0x804e130 );

	// Node '0x804e178'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e178 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e1a0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804e178->addAttribute ( __attr__0x804e1a0 );
	__node__0x804e050->addNode ( __node__0x804e178 );

	// Node '0x804e1c0'
	DMLX::Node * __node__0x804e1c0 = new DMLX::Node ( "::getNameIdStatic ( ) \n  { return ", false );
	__node__0x804e050->addNode ( __node__0x804e1c0 );

	// Node '0x804e210'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e210 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e238 = new DMLX::Attribute ( &__keyword__0x49198152, "@forceObjectAs" );
	__node__0x804e210->addAttribute ( __attr__0x804e238 );
	__node__0x804e050->addNode ( __node__0x804e210 );

	// Node '0x804e260'
	DMLX::Node * __node__0x804e260 = new DMLX::Node ( "::getNameIdStatic (); }\n  ", false );
	__node__0x804e050->addNode ( __node__0x804e260 );
	__node__0x804dff0->addNode ( __node__0x804e050 );

	// Node '0x804e2a8'
	DMLX::Node * __node__0x804e2a8 = new DMLX::Node ( "\n  ", false );
	__node__0x804dff0->addNode ( __node__0x804e2a8 );

	// Node '0x804e2e0'
	// Node 'xsl:otherwise'
	DMLX::Node * __node__0x804e2e0 = new DMLX::Node ( &__keyword__0x18f3c9cd );

	// Node '0x804e308'
	DMLX::Node * __node__0x804e308 = new DMLX::Node ( "\nDoolp::ObjectNameId ", false );
	__node__0x804e2e0->addNode ( __node__0x804e308 );

	// Node '0x804e350'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e350 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e378 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804e350->addAttribute ( __attr__0x804e378 );
	__node__0x804e2e0->addNode ( __node__0x804e350 );

	// Node '0x804e398'
	DMLX::Node * __node__0x804e398 = new DMLX::Node ( "::getNameIdStatic ( ) { return ", false );
	__node__0x804e2e0->addNode ( __node__0x804e398 );

	// Node '0x804e3e8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e3e8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e410 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804e3e8->addAttribute ( __attr__0x804e410 );
	__node__0x804e2e0->addNode ( __node__0x804e3e8 );

	// Node '0x804e430'
	DMLX::Node * __node__0x804e430 = new DMLX::Node ( "; }\n  ", false );
	__node__0x804e2e0->addNode ( __node__0x804e430 );
	__node__0x804dff0->addNode ( __node__0x804e2e0 );

	// Node '0x804e468'
	DMLX::Node * __node__0x804e468 = new DMLX::Node ( "\n", false );
	__node__0x804dff0->addNode ( __node__0x804e468 );
	__node__0x804d770->addNode ( __node__0x804dff0 );

	// Node '0x804e4a0'
	DMLX::Node * __node__0x804e4a0 = new DMLX::Node ( "\nDoolp::ObjectNameId ", false );
	__node__0x804d770->addNode ( __node__0x804e4a0 );

	// Node '0x804e4e8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e4e8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e510 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804e4e8->addAttribute ( __attr__0x804e510 );
	__node__0x804d770->addNode ( __node__0x804e4e8 );

	// Node '0x804e530'
	DMLX::Node * __node__0x804e530 = new DMLX::Node ( "::getNameId ( ) { return getNameIdStatic (); }\n", false );
	__node__0x804d770->addNode ( __node__0x804e530 );

	// Node '0x804e590'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804e590 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e5b8 = new DMLX::Attribute ( &__keyword__0x49198152, "Parameter" );
	__node__0x804e590->addAttribute ( __attr__0x804e5b8 );

	// Node '0x804e5d8'
	DMLX::Node * __node__0x804e5d8 = new DMLX::Node ( "DoolpObjectParam__StaticValues ( ", false );
	__node__0x804e590->addNode ( __node__0x804e5d8 );

	// Node '0x804e628'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e628 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e650 = new DMLX::Attribute ( &__keyword__0x49198152, "@line" );
	__node__0x804e628->addAttribute ( __attr__0x804e650 );
	__node__0x804e590->addNode ( __node__0x804e628 );

	// Node '0x804e670'
	DMLX::Node * __node__0x804e670 = new DMLX::Node ( ", ", false );
	__node__0x804e590->addNode ( __node__0x804e670 );

	// Node '0x804e6a8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e6a8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e6d0 = new DMLX::Attribute ( &__keyword__0x49198152, "../@name" );
	__node__0x804e6a8->addAttribute ( __attr__0x804e6d0 );
	__node__0x804e590->addNode ( __node__0x804e6a8 );

	// Node '0x804e6f0'
	DMLX::Node * __node__0x804e6f0 = new DMLX::Node ( ", ", false );
	__node__0x804e590->addNode ( __node__0x804e6f0 );

	// Node '0x804e728'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e728 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e750 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x804e728->addAttribute ( __attr__0x804e750 );
	__node__0x804e590->addNode ( __node__0x804e728 );

	// Node '0x804e770'
	DMLX::Node * __node__0x804e770 = new DMLX::Node ( ", ", false );
	__node__0x804e590->addNode ( __node__0x804e770 );

	// Node '0x804e7a8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e7a8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e7d0 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x804e7a8->addAttribute ( __attr__0x804e7d0 );
	__node__0x804e590->addNode ( __node__0x804e7a8 );

	// Node '0x804e7f0'
	DMLX::Node * __node__0x804e7f0 = new DMLX::Node ( " );\n", false );
	__node__0x804e590->addNode ( __node__0x804e7f0 );
	__node__0x804d770->addNode ( __node__0x804e590 );

	// Node '0x804e828'
	DMLX::Node * __node__0x804e828 = new DMLX::Node ( "\n", false );
	__node__0x804d770->addNode ( __node__0x804e828 );

	// Node '0x804e860'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804e860 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e888 = new DMLX::Attribute ( &__keyword__0x49198152, "Link" );
	__node__0x804e860->addAttribute ( __attr__0x804e888 );

	// Node '0x804e8a8'
	DMLX::Node * __node__0x804e8a8 = new DMLX::Node ( "DoolpObjectLink__StaticValues ( ", false );
	__node__0x804e860->addNode ( __node__0x804e8a8 );

	// Node '0x804e8f8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e8f8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e920 = new DMLX::Attribute ( &__keyword__0x49198152, "@line" );
	__node__0x804e8f8->addAttribute ( __attr__0x804e920 );
	__node__0x804e860->addNode ( __node__0x804e8f8 );

	// Node '0x804e940'
	DMLX::Node * __node__0x804e940 = new DMLX::Node ( ", ", false );
	__node__0x804e860->addNode ( __node__0x804e940 );

	// Node '0x804e978'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e978 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804e9a0 = new DMLX::Attribute ( &__keyword__0x49198152, "../@name" );
	__node__0x804e978->addAttribute ( __attr__0x804e9a0 );
	__node__0x804e860->addNode ( __node__0x804e978 );

	// Node '0x804e9c0'
	DMLX::Node * __node__0x804e9c0 = new DMLX::Node ( ", ", false );
	__node__0x804e860->addNode ( __node__0x804e9c0 );

	// Node '0x804e9f8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804e9f8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ea20 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x804e9f8->addAttribute ( __attr__0x804ea20 );
	__node__0x804e860->addNode ( __node__0x804e9f8 );

	// Node '0x804ea40'
	DMLX::Node * __node__0x804ea40 = new DMLX::Node ( ", ", false );
	__node__0x804e860->addNode ( __node__0x804ea40 );

	// Node '0x804ea78'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ea78 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804eaa0 = new DMLX::Attribute ( &__keyword__0x49198152, "@linkType" );
	__node__0x804ea78->addAttribute ( __attr__0x804eaa0 );
	__node__0x804e860->addNode ( __node__0x804ea78 );

	// Node '0x804eac0'
	DMLX::Node * __node__0x804eac0 = new DMLX::Node ( ", ", false );
	__node__0x804e860->addNode ( __node__0x804eac0 );

	// Node '0x804eaf8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804eaf8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804eb20 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x804eaf8->addAttribute ( __attr__0x804eb20 );
	__node__0x804e860->addNode ( __node__0x804eaf8 );

	// Node '0x804eb40'
	DMLX::Node * __node__0x804eb40 = new DMLX::Node ( " );\n", false );
	__node__0x804e860->addNode ( __node__0x804eb40 );
	__node__0x804d770->addNode ( __node__0x804e860 );

	// Node '0x804eb78'
	DMLX::Node * __node__0x804eb78 = new DMLX::Node ( "\n", false );
	__node__0x804d770->addNode ( __node__0x804eb78 );

	// Node '0x804ebb0'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804ebb0 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ebd8 = new DMLX::Attribute ( &__keyword__0x49198152, "Slot" );
	__node__0x804ebb0->addAttribute ( __attr__0x804ebd8 );

	// Node '0x804ebf8'
	DMLX::Node * __node__0x804ebf8 = new DMLX::Node ( "DoolpObjectSlot__StaticValues(", false );
	__node__0x804ebb0->addNode ( __node__0x804ebf8 );

	// Node '0x804ec48'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ec48 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ec70 = new DMLX::Attribute ( &__keyword__0x49198152, "@line" );
	__node__0x804ec48->addAttribute ( __attr__0x804ec70 );
	__node__0x804ebb0->addNode ( __node__0x804ec48 );

	// Node '0x804ec90'
	DMLX::Node * __node__0x804ec90 = new DMLX::Node ( ", ", false );
	__node__0x804ebb0->addNode ( __node__0x804ec90 );

	// Node '0x804ecc8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ecc8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ecf0 = new DMLX::Attribute ( &__keyword__0x49198152, "../@name" );
	__node__0x804ecc8->addAttribute ( __attr__0x804ecf0 );
	__node__0x804ebb0->addNode ( __node__0x804ecc8 );

	// Node '0x804ed10'
	DMLX::Node * __node__0x804ed10 = new DMLX::Node ( ", ", false );
	__node__0x804ebb0->addNode ( __node__0x804ed10 );

	// Node '0x804ed48'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ed48 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ed70 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x804ed48->addAttribute ( __attr__0x804ed70 );
	__node__0x804ebb0->addNode ( __node__0x804ed48 );

	// Node '0x804ed90'
	DMLX::Node * __node__0x804ed90 = new DMLX::Node ( ", \"", false );
	__node__0x804ebb0->addNode ( __node__0x804ed90 );

	// Node '0x804edc8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804edc8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804edf0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804edc8->addAttribute ( __attr__0x804edf0 );
	__node__0x804ebb0->addNode ( __node__0x804edc8 );

	// Node '0x804ee10'
	DMLX::Node * __node__0x804ee10 = new DMLX::Node ( "<", false );
	__node__0x804ebb0->addNode ( __node__0x804ee10 );

	// Node '0x804ee48'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ee48 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ee70 = new DMLX::Attribute ( &__keyword__0x49198152, "@signature" );
	__node__0x804ee48->addAttribute ( __attr__0x804ee70 );
	__node__0x804ebb0->addNode ( __node__0x804ee48 );

	// Node '0x804ee90'
	DMLX::Node * __node__0x804ee90 = new DMLX::Node ( ">\",", false );
	__node__0x804ebb0->addNode ( __node__0x804ee90 );

	// Node '0x804eec8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804eec8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804eef0 = new DMLX::Attribute ( &__keyword__0x49198152, "@signature" );
	__node__0x804eec8->addAttribute ( __attr__0x804eef0 );
	__node__0x804ebb0->addNode ( __node__0x804eec8 );

	// Node '0x804ef10'
	DMLX::Node * __node__0x804ef10 = new DMLX::Node ( ");\n", false );
	__node__0x804ebb0->addNode ( __node__0x804ef10 );
	__node__0x804d770->addNode ( __node__0x804ebb0 );

	// Node '0x804ef48'
	DMLX::Node * __node__0x804ef48 = new DMLX::Node ( "\n", false );
	__node__0x804d770->addNode ( __node__0x804ef48 );

	// Node '0x804ef80'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804ef80 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804efa8 = new DMLX::Attribute ( &__keyword__0x49198152, "SlotHelper" );
	__node__0x804ef80->addAttribute ( __attr__0x804efa8 );

	// Node '0x804efc8'
	// Node 'xsl:if'
	DMLX::Node * __node__0x804efc8 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804eff0 = new DMLX::Attribute ( &__keyword__0x10b78238, "@type = 'local'" );
	__node__0x804efc8->addAttribute ( __attr__0x804eff0 );

	// Node '0x804f018'
	DMLX::Node * __node__0x804f018 = new DMLX::Node ( "DoolpObjectSlot__PerClass(", false );
	__node__0x804efc8->addNode ( __node__0x804f018 );

	// Node '0x804f060'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f060 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f088 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x804f060->addAttribute ( __attr__0x804f088 );
	__node__0x804efc8->addNode ( __node__0x804f060 );

	// Node '0x804f0a8'
	DMLX::Node * __node__0x804f0a8 = new DMLX::Node ( ",", false );
	__node__0x804efc8->addNode ( __node__0x804f0a8 );

	// Node '0x804f0e0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f0e0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f108 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804f0e0->addAttribute ( __attr__0x804f108 );
	__node__0x804efc8->addNode ( __node__0x804f0e0 );

	// Node '0x804f128'
	DMLX::Node * __node__0x804f128 = new DMLX::Node ( ");\n", false );
	__node__0x804efc8->addNode ( __node__0x804f128 );
	__node__0x804ef80->addNode ( __node__0x804efc8 );
	__node__0x804d770->addNode ( __node__0x804ef80 );

	// Node '0x804f160'
	DMLX::Node * __node__0x804f160 = new DMLX::Node ( "\n\nDoolp::ObjectSlotMap __DoolpObject__", false );
	__node__0x804d770->addNode ( __node__0x804f160 );

	// Node '0x804f1b8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f1b8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f1e0 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804f1b8->addAttribute ( __attr__0x804f1e0 );
	__node__0x804d770->addNode ( __node__0x804f1b8 );

	// Node '0x804f200'
	DMLX::Node * __node__0x804f200 = new DMLX::Node ( "__SlotMap;\nDoolp::SlotVirtual * ", false );
	__node__0x804d770->addNode ( __node__0x804f200 );

	// Node '0x804f250'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f250 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f278 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804f250->addAttribute ( __attr__0x804f278 );
	__node__0x804d770->addNode ( __node__0x804f250 );

	// Node '0x804f298'
	DMLX::Node * __node__0x804f298 = new DMLX::Node ( "::__getSlot ( Doolp::ObjectSlotId slotId )\n{\n  Doolp::SlotVirtual * slot = NULL;  \n  unsigned int offset = __DoolpObject__", false );
	__node__0x804d770->addNode ( __node__0x804f298 );

	// Node '0x804f340'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f340 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f368 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804f340->addAttribute ( __attr__0x804f368 );
	__node__0x804d770->addNode ( __node__0x804f340 );

	// Node '0x804f388'
	DMLX::Node * __node__0x804f388 = new DMLX::Node ( "__SlotMap.get(slotId);\n  if ( offset != 0 ) slot = ( (Doolp::SlotVirtual *) (((unsigned int)this) +  offset) );\n  if ( slot != NULL ) return slot;\n  ", false );
	__node__0x804d770->addNode ( __node__0x804f388 );

	// Node '0x804f450'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804f450 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f478 = new DMLX::Attribute ( &__keyword__0x49198152, "Inherits" );
	__node__0x804f450->addAttribute ( __attr__0x804f478 );

	// Node '0x804f498'
	DMLX::Node * __node__0x804f498 = new DMLX::Node ( "slot = this->", false );
	__node__0x804f450->addNode ( __node__0x804f498 );

	// Node '0x804f4d8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f4d8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f500 = new DMLX::Attribute ( &__keyword__0x49198152, "@class" );
	__node__0x804f4d8->addAttribute ( __attr__0x804f500 );
	__node__0x804f450->addNode ( __node__0x804f4d8 );

	// Node '0x804f520'
	DMLX::Node * __node__0x804f520 = new DMLX::Node ( "::__getSlot( slotId ) ; if ( slot != NULL ) return slot;\n  ", false );
	__node__0x804f450->addNode ( __node__0x804f520 );
	__node__0x804d770->addNode ( __node__0x804f450 );

	// Node '0x804f588'
	DMLX::Node * __node__0x804f588 = new DMLX::Node ( "\n  Warn ( \"Could not get slot for slotId '0x%x'\\n\", slotId );\n  return NULL;\n}\nbool ", false );
	__node__0x804d770->addNode ( __node__0x804f588 );

	// Node '0x804f610'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f610 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f638 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804f610->addAttribute ( __attr__0x804f638 );
	__node__0x804d770->addNode ( __node__0x804f610 );

	// Node '0x804f658'
	DMLX::Node * __node__0x804f658 = new DMLX::Node ( "::__initStatic (Doolp::Forge * forge)\n{\n  forge->getObjectStaticInfo()->addObject ( ", false );
	__node__0x804d770->addNode ( __node__0x804f658 );

	// Node '0x804f6e0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f6e0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f708 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804f6e0->addAttribute ( __attr__0x804f708 );
	__node__0x804d770->addNode ( __node__0x804f6e0 );

	// Node '0x804f728'
	DMLX::Node * __node__0x804f728 = new DMLX::Node ( ",\n                                            \"", false );
	__node__0x804d770->addNode ( __node__0x804f728 );

	// Node '0x804f788'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f788 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f7b0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804f788->addAttribute ( __attr__0x804f7b0 );
	__node__0x804d770->addNode ( __node__0x804f788 );

	// Node '0x804f7d0'
	DMLX::Node * __node__0x804f7d0 = new DMLX::Node ( "\",\n                                            &__", false );
	__node__0x804d770->addNode ( __node__0x804f7d0 );

	// Node '0x804f830'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f830 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f858 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x804f830->addAttribute ( __attr__0x804f858 );
	__node__0x804d770->addNode ( __node__0x804f830 );

	// Node '0x804f878'
	DMLX::Node * __node__0x804f878 = new DMLX::Node ( "__constructor );\n  ", false );
	__node__0x804d770->addNode ( __node__0x804f878 );

	// Node '0x804f8b8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804f8b8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f8e0 = new DMLX::Attribute ( &__keyword__0x49198152, "forceConstructorForObjects" );
	__node__0x804f8b8->addAttribute ( __attr__0x804f8e0 );

	// Node '0x804f910'
	DMLX::Node * __node__0x804f910 = new DMLX::Node ( "forge->getObjectStaticInfo()->assignObjectConstuctor( this->", false );
	__node__0x804f8b8->addNode ( __node__0x804f910 );

	// Node '0x804f980'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804f980 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804f9a8 = new DMLX::Attribute ( &__keyword__0x49198152, "@value" );
	__node__0x804f980->addAttribute ( __attr__0x804f9a8 );
	__node__0x804f8b8->addNode ( __node__0x804f980 );

	// Node '0x804f9c8'
	DMLX::Node * __node__0x804f9c8 = new DMLX::Node ( "::getNameId(), &__", false );
	__node__0x804f8b8->addNode ( __node__0x804f9c8 );

	// Node '0x804fa08'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fa08 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fa30 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x804fa08->addAttribute ( __attr__0x804fa30 );
	__node__0x804f8b8->addNode ( __node__0x804fa08 );

	// Node '0x804fa50'
	DMLX::Node * __node__0x804fa50 = new DMLX::Node ( "__constructor );\n  ", false );
	__node__0x804f8b8->addNode ( __node__0x804fa50 );
	__node__0x804d770->addNode ( __node__0x804f8b8 );

	// Node '0x804fa90'
	DMLX::Node * __node__0x804fa90 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x804fa90 );

	// Node '0x804fac8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804fac8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804faf0 = new DMLX::Attribute ( &__keyword__0x49198152, "Parameter" );
	__node__0x804fac8->addAttribute ( __attr__0x804faf0 );

	// Node '0x804fb10'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fb10 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fb38 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804fb10->addAttribute ( __attr__0x804fb38 );
	__node__0x804fac8->addNode ( __node__0x804fb10 );

	// Node '0x804fb58'
	DMLX::Node * __node__0x804fb58 = new DMLX::Node ( ".setOffset ( this );\n  ", false );
	__node__0x804fac8->addNode ( __node__0x804fb58 );
	__node__0x804d770->addNode ( __node__0x804fac8 );

	// Node '0x804fba0'
	DMLX::Node * __node__0x804fba0 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x804fba0 );

	// Node '0x804fbd8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x804fbd8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fc00 = new DMLX::Attribute ( &__keyword__0x49198152, "Link" );
	__node__0x804fbd8->addAttribute ( __attr__0x804fc00 );

	// Node '0x804fc20'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fc20 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fc48 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804fc20->addAttribute ( __attr__0x804fc48 );
	__node__0x804fbd8->addNode ( __node__0x804fc20 );

	// Node '0x804fc68'
	DMLX::Node * __node__0x804fc68 = new DMLX::Node ( ".setOffset ( this );\n  ", false );
	__node__0x804fbd8->addNode ( __node__0x804fc68 );

	// Node '0x804fcb0'
	// Node 'xsl:if'
	DMLX::Node * __node__0x804fcb0 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x804fcd8 = new DMLX::Attribute ( &__keyword__0x10b78238, "@reverse" );
	__node__0x804fcb0->addAttribute ( __attr__0x804fcd8 );

	// Node '0x804fcf8'
	DMLX::Node * __node__0x804fcf8 = new DMLX::Node ( "// Shall set reverse to '", false );
	__node__0x804fcb0->addNode ( __node__0x804fcf8 );

	// Node '0x804fd40'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fd40 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fd68 = new DMLX::Attribute ( &__keyword__0x49198152, "@reverse" );
	__node__0x804fd40->addAttribute ( __attr__0x804fd68 );
	__node__0x804fcb0->addNode ( __node__0x804fd40 );

	// Node '0x804fd88'
	DMLX::Node * __node__0x804fd88 = new DMLX::Node ( "'\n  { ", false );
	__node__0x804fcb0->addNode ( __node__0x804fd88 );

	// Node '0x804fdc0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fdc0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fde8 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x804fdc0->addAttribute ( __attr__0x804fde8 );
	__node__0x804fcb0->addNode ( __node__0x804fdc0 );

	// Node '0x804fe08'
	DMLX::Node * __node__0x804fe08 = new DMLX::Node ( " u((Doolp::ObjectId)0); ", false );
	__node__0x804fcb0->addNode ( __node__0x804fe08 );

	// Node '0x804fe50'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fe50 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804fe78 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804fe50->addAttribute ( __attr__0x804fe78 );
	__node__0x804fcb0->addNode ( __node__0x804fe50 );

	// Node '0x804fe98'
	DMLX::Node * __node__0x804fe98 = new DMLX::Node ( ".setReverse ( &(u.", false );
	__node__0x804fcb0->addNode ( __node__0x804fe98 );

	// Node '0x804fed8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804fed8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ff00 = new DMLX::Attribute ( &__keyword__0x49198152, "@reverse" );
	__node__0x804fed8->addAttribute ( __attr__0x804ff00 );
	__node__0x804fcb0->addNode ( __node__0x804fed8 );

	// Node '0x804ff20'
	DMLX::Node * __node__0x804ff20 = new DMLX::Node ( ")); u.", false );
	__node__0x804fcb0->addNode ( __node__0x804ff20 );

	// Node '0x804ff58'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ff58 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x804ff80 = new DMLX::Attribute ( &__keyword__0x49198152, "@reverse" );
	__node__0x804ff58->addAttribute ( __attr__0x804ff80 );
	__node__0x804fcb0->addNode ( __node__0x804ff58 );

	// Node '0x804ffa0'
	DMLX::Node * __node__0x804ffa0 = new DMLX::Node ( ".setReverse ( &", false );
	__node__0x804fcb0->addNode ( __node__0x804ffa0 );

	// Node '0x804ffe0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x804ffe0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050008 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x804ffe0->addAttribute ( __attr__0x8050008 );
	__node__0x804fcb0->addNode ( __node__0x804ffe0 );

	// Node '0x8050028'
	DMLX::Node * __node__0x8050028 = new DMLX::Node ( "); }\n  ", false );
	__node__0x804fcb0->addNode ( __node__0x8050028 );
	__node__0x804fbd8->addNode ( __node__0x804fcb0 );
	__node__0x804d770->addNode ( __node__0x804fbd8 );

	// Node '0x8050060'
	DMLX::Node * __node__0x8050060 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050060 );

	// Node '0x8050098'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8050098 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80500c0 = new DMLX::Attribute ( &__keyword__0x49198152, "Slot" );
	__node__0x8050098->addAttribute ( __attr__0x80500c0 );

	// Node '0x80500e0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80500e0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050108 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80500e0->addAttribute ( __attr__0x8050108 );
	__node__0x8050098->addNode ( __node__0x80500e0 );

	// Node '0x8050128'
	DMLX::Node * __node__0x8050128 = new DMLX::Node ( ".setOffset ( this );\n  ", false );
	__node__0x8050098->addNode ( __node__0x8050128 );
	__node__0x804d770->addNode ( __node__0x8050098 );

	// Node '0x8050170'
	DMLX::Node * __node__0x8050170 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050170 );

	// Node '0x80501a8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x80501a8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80501d0 = new DMLX::Attribute ( &__keyword__0x49198152, "Slot" );
	__node__0x80501a8->addAttribute ( __attr__0x80501d0 );

	// Node '0x80501f0'
	DMLX::Node * __node__0x80501f0 = new DMLX::Node ( "__DoolpObject__", false );
	__node__0x80501a8->addNode ( __node__0x80501f0 );

	// Node '0x8050230'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050230 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050258 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x8050230->addAttribute ( __attr__0x8050258 );
	__node__0x80501a8->addNode ( __node__0x8050230 );

	// Node '0x8050278'
	DMLX::Node * __node__0x8050278 = new DMLX::Node ( "__SlotMap.put(", false );
	__node__0x80501a8->addNode ( __node__0x8050278 );

	// Node '0x80502b8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80502b8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80502e0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80502b8->addAttribute ( __attr__0x80502e0 );
	__node__0x80501a8->addNode ( __node__0x80502b8 );

	// Node '0x8050300'
	DMLX::Node * __node__0x8050300 = new DMLX::Node ( ".getSlotId(), ((unsigned int)&", false );
	__node__0x80501a8->addNode ( __node__0x8050300 );

	// Node '0x8050350'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050350 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050378 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050350->addAttribute ( __attr__0x8050378 );
	__node__0x80501a8->addNode ( __node__0x8050350 );

	// Node '0x8050398'
	DMLX::Node * __node__0x8050398 = new DMLX::Node ( ") - ((unsigned int)this) );\n  ", false );
	__node__0x80501a8->addNode ( __node__0x8050398 );
	__node__0x804d770->addNode ( __node__0x80501a8 );

	// Node '0x80503e8'
	DMLX::Node * __node__0x80503e8 = new DMLX::Node ( "\n  __assignSlots ();\n  __registerSlots (forge);\n  ", false );
	__node__0x804d770->addNode ( __node__0x80503e8 );

	// Node '0x8050448'
	// Node 'xsl:if'
	DMLX::Node * __node__0x8050448 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x8050470 = new DMLX::Attribute ( &__keyword__0x10b78238, "@name = 'Doolp::Forge'" );
	__node__0x8050448->addAttribute ( __attr__0x8050470 );

	// Node '0x80504a0'
	DMLX::Node * __node__0x80504a0 = new DMLX::Node ( "registerDoolpObjects(this);\n  ", false );
	__node__0x8050448->addNode ( __node__0x80504a0 );
	__node__0x804d770->addNode ( __node__0x8050448 );

	// Node '0x80504f0'
	DMLX::Node * __node__0x80504f0 = new DMLX::Node ( "\n  return true;\n}\nbool ", false );
	__node__0x804d770->addNode ( __node__0x80504f0 );

	// Node '0x8050538'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050538 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050560 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050538->addAttribute ( __attr__0x8050560 );
	__node__0x804d770->addNode ( __node__0x8050538 );

	// Node '0x8050580'
	DMLX::Node * __node__0x8050580 = new DMLX::Node ( "::__registerSlots ( Doolp::Forge * forge)\n{\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050580 );

	// Node '0x80505e0'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x80505e0 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050608 = new DMLX::Attribute ( &__keyword__0x49198152, "Slot" );
	__node__0x80505e0->addAttribute ( __attr__0x8050608 );

	// Node '0x8050628'
	DMLX::Node * __node__0x8050628 = new DMLX::Node ( "forge->getObjectStaticInfo()->addSlot ( ", false );
	__node__0x80505e0->addNode ( __node__0x8050628 );

	// Node '0x8050680'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050680 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80506a8 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x8050680->addAttribute ( __attr__0x80506a8 );
	__node__0x80505e0->addNode ( __node__0x8050680 );

	// Node '0x80506c8'
	DMLX::Node * __node__0x80506c8 = new DMLX::Node ( ",", false );
	__node__0x80505e0->addNode ( __node__0x80506c8 );

	// Node '0x8050700'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050700 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050728 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8050700->addAttribute ( __attr__0x8050728 );
	__node__0x80505e0->addNode ( __node__0x8050700 );

	// Node '0x8050748'
	DMLX::Node * __node__0x8050748 = new DMLX::Node ( ", ", false );
	__node__0x80505e0->addNode ( __node__0x8050748 );

	// Node '0x8050780'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050780 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80507a8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050780->addAttribute ( __attr__0x80507a8 );
	__node__0x80505e0->addNode ( __node__0x8050780 );

	// Node '0x80507c8'
	DMLX::Node * __node__0x80507c8 = new DMLX::Node ( ".getStaticSlot() );\n  ", false );
	__node__0x80505e0->addNode ( __node__0x80507c8 );
	__node__0x804d770->addNode ( __node__0x80505e0 );

	// Node '0x8050810'
	DMLX::Node * __node__0x8050810 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050810 );

	// Node '0x8050848'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8050848 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050870 = new DMLX::Attribute ( &__keyword__0x49198152, "SlotHelper" );
	__node__0x8050848->addAttribute ( __attr__0x8050870 );

	// Node '0x8050890'
	// Node 'xsl:if'
	DMLX::Node * __node__0x8050890 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x80508b8 = new DMLX::Attribute ( &__keyword__0x10b78238, "@type = 'local'" );
	__node__0x8050890->addAttribute ( __attr__0x80508b8 );

	// Node '0x80508e0'
	DMLX::Node * __node__0x80508e0 = new DMLX::Node ( "forge->getObjectStaticInfo()->setImplementedSlot ( getNameId(), ", false );
	__node__0x8050890->addNode ( __node__0x80508e0 );

	// Node '0x8050950'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050950 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050978 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050950->addAttribute ( __attr__0x8050978 );
	__node__0x8050890->addNode ( __node__0x8050950 );

	// Node '0x8050998'
	DMLX::Node * __node__0x8050998 = new DMLX::Node ( ".getSlotId() );\n  ", false );
	__node__0x8050890->addNode ( __node__0x8050998 );
	__node__0x8050848->addNode ( __node__0x8050890 );
	__node__0x804d770->addNode ( __node__0x8050848 );

	// Node '0x80509d8'
	DMLX::Node * __node__0x80509d8 = new DMLX::Node ( "\n  return true;\n}\nbool ", false );
	__node__0x804d770->addNode ( __node__0x80509d8 );

	// Node '0x8050a20'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050a20 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050a48 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050a20->addAttribute ( __attr__0x8050a48 );
	__node__0x804d770->addNode ( __node__0x8050a20 );

	// Node '0x8050a68'
	DMLX::Node * __node__0x8050a68 = new DMLX::Node ( "::__initSlots ()\n{\n  Log ( \"assignSlots : this=%p\\n\", this );\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050a68 );

	// Node '0x8050ad8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8050ad8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050b00 = new DMLX::Attribute ( &__keyword__0x49198152, "Inherits" );
	__node__0x8050ad8->addAttribute ( __attr__0x8050b00 );

	// Node '0x8050b20'
	DMLX::Node * __node__0x8050b20 = new DMLX::Node ( "this->", false );
	__node__0x8050ad8->addNode ( __node__0x8050b20 );

	// Node '0x8050b58'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050b58 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050b80 = new DMLX::Attribute ( &__keyword__0x49198152, "@class" );
	__node__0x8050b58->addAttribute ( __attr__0x8050b80 );
	__node__0x8050ad8->addNode ( __node__0x8050b58 );

	// Node '0x8050ba0'
	DMLX::Node * __node__0x8050ba0 = new DMLX::Node ( "::__initSlots ();\n  ", false );
	__node__0x8050ad8->addNode ( __node__0x8050ba0 );
	__node__0x804d770->addNode ( __node__0x8050ad8 );

	// Node '0x8050be8'
	DMLX::Node * __node__0x8050be8 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050be8 );

	// Node '0x8050c20'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8050c20 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050c48 = new DMLX::Attribute ( &__keyword__0x49198152, "SlotHelper" );
	__node__0x8050c20->addAttribute ( __attr__0x8050c48 );

	// Node '0x8050c68'
	// Node 'xsl:if'
	DMLX::Node * __node__0x8050c68 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x8050c90 = new DMLX::Attribute ( &__keyword__0x10b78238, "@type = 'local'" );
	__node__0x8050c68->addAttribute ( __attr__0x8050c90 );

	// Node '0x8050cb8'
	DMLX::Node * __node__0x8050cb8 = new DMLX::Node ( "DoolpObjectSlot__getFunctions(", false );
	__node__0x8050c68->addNode ( __node__0x8050cb8 );

	// Node '0x8050d08'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050d08 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050d30 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x8050d08->addAttribute ( __attr__0x8050d30 );
	__node__0x8050c68->addNode ( __node__0x8050d08 );

	// Node '0x8050d50'
	DMLX::Node * __node__0x8050d50 = new DMLX::Node ( ",", false );
	__node__0x8050c68->addNode ( __node__0x8050d50 );

	// Node '0x8050d88'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050d88 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050db0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050d88->addAttribute ( __attr__0x8050db0 );
	__node__0x8050c68->addNode ( __node__0x8050d88 );

	// Node '0x8050dd0'
	DMLX::Node * __node__0x8050dd0 = new DMLX::Node ( ");\n  ", false );
	__node__0x8050c68->addNode ( __node__0x8050dd0 );
	__node__0x8050c20->addNode ( __node__0x8050c68 );
	__node__0x804d770->addNode ( __node__0x8050c20 );

	// Node '0x8050e08'
	DMLX::Node * __node__0x8050e08 = new DMLX::Node ( "\n  return true;\n}\nbool ", false );
	__node__0x804d770->addNode ( __node__0x8050e08 );

	// Node '0x8050e50'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050e50 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050e78 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8050e50->addAttribute ( __attr__0x8050e78 );
	__node__0x804d770->addNode ( __node__0x8050e50 );

	// Node '0x8050e98'
	DMLX::Node * __node__0x8050e98 = new DMLX::Node ( "::__assignSlots ()\n{\n  Log ( \"assignSlots : this=%p\\n\", this );\n  ", false );
	__node__0x804d770->addNode ( __node__0x8050e98 );

	// Node '0x8050f08'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8050f08 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050f30 = new DMLX::Attribute ( &__keyword__0x49198152, "Inherits" );
	__node__0x8050f08->addAttribute ( __attr__0x8050f30 );

	// Node '0x8050f50'
	DMLX::Node * __node__0x8050f50 = new DMLX::Node ( "this->", false );
	__node__0x8050f08->addNode ( __node__0x8050f50 );

	// Node '0x8050f88'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8050f88 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8050fb0 = new DMLX::Attribute ( &__keyword__0x49198152, "@class" );
	__node__0x8050f88->addAttribute ( __attr__0x8050fb0 );
	__node__0x8050f08->addNode ( __node__0x8050f88 );

	// Node '0x8050fd0'
	DMLX::Node * __node__0x8050fd0 = new DMLX::Node ( "::__assignSlots ();\n  ", false );
	__node__0x8050f08->addNode ( __node__0x8050fd0 );
	__node__0x804d770->addNode ( __node__0x8050f08 );

	// Node '0x8051018'
	DMLX::Node * __node__0x8051018 = new DMLX::Node ( "\n  ", false );
	__node__0x804d770->addNode ( __node__0x8051018 );

	// Node '0x8051050'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8051050 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051078 = new DMLX::Attribute ( &__keyword__0x49198152, "SlotHelper" );
	__node__0x8051050->addAttribute ( __attr__0x8051078 );

	// Node '0x8051098'
	// Node 'xsl:choose'
	DMLX::Node * __node__0x8051098 = new DMLX::Node ( &__keyword__0x5c8e5a24 );

	// Node '0x80510c0'
	// Node 'xsl:when'
	DMLX::Node * __node__0x80510c0 = new DMLX::Node ( &__keyword__0x7409f28b );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x80510e8 = new DMLX::Attribute ( &__keyword__0x10b78238, "@type = 'local'" );
	__node__0x80510c0->addAttribute ( __attr__0x80510e8 );

	// Node '0x8051110'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051110 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051138 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051110->addAttribute ( __attr__0x8051138 );
	__node__0x80510c0->addNode ( __node__0x8051110 );

	// Node '0x8051158'
	DMLX::Node * __node__0x8051158 = new DMLX::Node ( ".assign ( &", false );
	__node__0x80510c0->addNode ( __node__0x8051158 );

	// Node '0x8051190'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051190 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80511b8 = new DMLX::Attribute ( &__keyword__0x49198152, "../@name" );
	__node__0x8051190->addAttribute ( __attr__0x80511b8 );
	__node__0x80510c0->addNode ( __node__0x8051190 );

	// Node '0x80511d8'
	DMLX::Node * __node__0x80511d8 = new DMLX::Node ( "::doolpfunclocal(", false );
	__node__0x80510c0->addNode ( __node__0x80511d8 );

	// Node '0x8051218'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051218 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051240 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051218->addAttribute ( __attr__0x8051240 );
	__node__0x80510c0->addNode ( __node__0x8051218 );

	// Node '0x8051260'
	DMLX::Node * __node__0x8051260 = new DMLX::Node ( "));\n  ", false );
	__node__0x80510c0->addNode ( __node__0x8051260 );

	// Node '0x8051298'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051298 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80512c0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051298->addAttribute ( __attr__0x80512c0 );
	__node__0x80510c0->addNode ( __node__0x8051298 );

	// Node '0x80512e0'
	DMLX::Node * __node__0x80512e0 = new DMLX::Node ( ".checkOffset ( this );\n  DoolpObjectSlot__setFunctions(", false );
	__node__0x80510c0->addNode ( __node__0x80512e0 );

	// Node '0x8051348'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051348 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051370 = new DMLX::Attribute ( &__keyword__0x49198152, "../@nameId" );
	__node__0x8051348->addAttribute ( __attr__0x8051370 );
	__node__0x80510c0->addNode ( __node__0x8051348 );

	// Node '0x8051390'
	DMLX::Node * __node__0x8051390 = new DMLX::Node ( ",", false );
	__node__0x80510c0->addNode ( __node__0x8051390 );

	// Node '0x80513c8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80513c8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80513f0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80513c8->addAttribute ( __attr__0x80513f0 );
	__node__0x80510c0->addNode ( __node__0x80513c8 );

	// Node '0x8051410'
	DMLX::Node * __node__0x8051410 = new DMLX::Node ( ");", false );
	__node__0x80510c0->addNode ( __node__0x8051410 );
	__node__0x8051098->addNode ( __node__0x80510c0 );

	// Node '0x8051448'
	DMLX::Node * __node__0x8051448 = new DMLX::Node ( "\n  ", false );
	__node__0x8051098->addNode ( __node__0x8051448 );

	// Node '0x8051480'
	// Node 'xsl:when'
	DMLX::Node * __node__0x8051480 = new DMLX::Node ( &__keyword__0x7409f28b );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x80514a8 = new DMLX::Attribute ( &__keyword__0x10b78238, "@type = 'chooseAgentId'" );
	__node__0x8051480->addAttribute ( __attr__0x80514a8 );

	// Node '0x80514d8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80514d8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051500 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80514d8->addAttribute ( __attr__0x8051500 );
	__node__0x8051480->addNode ( __node__0x80514d8 );

	// Node '0x8051520'
	DMLX::Node * __node__0x8051520 = new DMLX::Node ( ".assignChooseAgentId ( &", false );
	__node__0x8051480->addNode ( __node__0x8051520 );

	// Node '0x8051568'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051568 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051590 = new DMLX::Attribute ( &__keyword__0x49198152, "../@name" );
	__node__0x8051568->addAttribute ( __attr__0x8051590 );
	__node__0x8051480->addNode ( __node__0x8051568 );

	// Node '0x80515b0'
	DMLX::Node * __node__0x80515b0 = new DMLX::Node ( "::doolpfunchelper(", false );
	__node__0x8051480->addNode ( __node__0x80515b0 );

	// Node '0x80515f0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80515f0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051618 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x80515f0->addAttribute ( __attr__0x8051618 );
	__node__0x8051480->addNode ( __node__0x80515f0 );

	// Node '0x8051638'
	DMLX::Node * __node__0x8051638 = new DMLX::Node ( ", ", false );
	__node__0x8051480->addNode ( __node__0x8051638 );

	// Node '0x8051670'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051670 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051698 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051670->addAttribute ( __attr__0x8051698 );
	__node__0x8051480->addNode ( __node__0x8051670 );

	// Node '0x80516b8'
	DMLX::Node * __node__0x80516b8 = new DMLX::Node ( "));\n  ", false );
	__node__0x8051480->addNode ( __node__0x80516b8 );
	__node__0x8051098->addNode ( __node__0x8051480 );

	// Node '0x80516f0'
	DMLX::Node * __node__0x80516f0 = new DMLX::Node ( "\n  ", false );
	__node__0x8051098->addNode ( __node__0x80516f0 );

	// Node '0x8051728'
	// Node 'xsl:otherwise'
	DMLX::Node * __node__0x8051728 = new DMLX::Node ( &__keyword__0x18f3c9cd );

	// Node '0x8051750'
	DMLX::Node * __node__0x8051750 = new DMLX::Node ( "#error Unknown helper : ", false );
	__node__0x8051728->addNode ( __node__0x8051750 );

	// Node '0x8051798'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051798 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80517c0 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x8051798->addAttribute ( __attr__0x80517c0 );
	__node__0x8051728->addNode ( __node__0x8051798 );

	// Node '0x80517e0'
	DMLX::Node * __node__0x80517e0 = new DMLX::Node ( "\n  ", false );
	__node__0x8051728->addNode ( __node__0x80517e0 );
	__node__0x8051098->addNode ( __node__0x8051728 );

	// Node '0x8051818'
	DMLX::Node * __node__0x8051818 = new DMLX::Node ( "\n  ", false );
	__node__0x8051098->addNode ( __node__0x8051818 );
	__node__0x8051050->addNode ( __node__0x8051098 );

	// Node '0x8051850'
	DMLX::Node * __node__0x8051850 = new DMLX::Node ( "\n  ", false );
	__node__0x8051050->addNode ( __node__0x8051850 );
	__node__0x804d770->addNode ( __node__0x8051050 );

	// Node '0x8051888'
	DMLX::Node * __node__0x8051888 = new DMLX::Node ( "\n  return true;\n}\n", false );
	__node__0x804d770->addNode ( __node__0x8051888 );

	// Node '0x80518c8'
	// Node 'xsl:if'
	DMLX::Node * __node__0x80518c8 = new DMLX::Node ( &__keyword__0xb9e0d5a );
	// Attribute 'test'
	DMLX::Attribute * __attr__0x80518f0 = new DMLX::Attribute ( &__keyword__0x10b78238, "@name != 'Doolp::Forge'" );
	__node__0x80518c8->addAttribute ( __attr__0x80518f0 );

	// Node '0x8051920'
	DMLX::Node * __node__0x8051920 = new DMLX::Node ( "\nbool __", false );
	__node__0x80518c8->addNode ( __node__0x8051920 );

	// Node '0x8051958'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051958 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051980 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x8051958->addAttribute ( __attr__0x8051980 );
	__node__0x80518c8->addNode ( __node__0x8051958 );

	// Node '0x80519a0'
	DMLX::Node * __node__0x80519a0 = new DMLX::Node ( "__initStaticObject (Doolp::Forge* _forge)\n{\n  __DOOLP_Log ( \"initStaticObject\\n\" );\n  ", false );
	__node__0x80518c8->addNode ( __node__0x80519a0 );

	// Node '0x8051a28'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051a28 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051a50 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051a28->addAttribute ( __attr__0x8051a50 );
	__node__0x80518c8->addNode ( __node__0x8051a28 );

	// Node '0x8051a70'
	DMLX::Node * __node__0x8051a70 = new DMLX::Node ( " o((Doolp::ObjectId)0);\n  o.__initStatic (_forge);\n  return true;\n}\nbool ", false );
	__node__0x80518c8->addNode ( __node__0x8051a70 );

	// Node '0x8051ae8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051ae8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051b10 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051ae8->addAttribute ( __attr__0x8051b10 );
	__node__0x80518c8->addNode ( __node__0x8051ae8 );

	// Node '0x8051b30'
	DMLX::Node * __node__0x8051b30 = new DMLX::Node ( "::serialize ( Doolp::Connection * conn )\n{\n  conn->WriteObjectHead ( this );     ", false );
	__node__0x80518c8->addNode ( __node__0x8051b30 );

	// Node '0x8051bb0'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8051bb0 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051bd8 = new DMLX::Attribute ( &__keyword__0x49198152, "Parameter" );
	__node__0x8051bb0->addAttribute ( __attr__0x8051bd8 );

	// Node '0x8051bf8'
	DMLX::Node * __node__0x8051bf8 = new DMLX::Node ( " \n  conn->setNextBlockIndex ( ", false );
	__node__0x8051bb0->addNode ( __node__0x8051bf8 );

	// Node '0x8051c48'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051c48 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051c70 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8051c48->addAttribute ( __attr__0x8051c70 );
	__node__0x8051bb0->addNode ( __node__0x8051c48 );

	// Node '0x8051c90'
	DMLX::Node * __node__0x8051c90 = new DMLX::Node ( " ); conn->Write ( ", false );
	__node__0x8051bb0->addNode ( __node__0x8051c90 );

	// Node '0x8051cd0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051cd0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051cf8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051cd0->addAttribute ( __attr__0x8051cf8 );
	__node__0x8051bb0->addNode ( __node__0x8051cd0 );

	// Node '0x8051d18'
	DMLX::Node * __node__0x8051d18 = new DMLX::Node ( " ); ", false );
	__node__0x8051bb0->addNode ( __node__0x8051d18 );
	__node__0x80518c8->addNode ( __node__0x8051bb0 );

	// Node '0x8051d50'
	DMLX::Node * __node__0x8051d50 = new DMLX::Node ( " ", false );
	__node__0x80518c8->addNode ( __node__0x8051d50 );

	// Node '0x8051d88'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8051d88 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051db0 = new DMLX::Attribute ( &__keyword__0x49198152, "Link" );
	__node__0x8051d88->addAttribute ( __attr__0x8051db0 );

	// Node '0x8051dd0'
	DMLX::Node * __node__0x8051dd0 = new DMLX::Node ( "\n  conn->setNextBlockIndex ( ", false );
	__node__0x8051d88->addNode ( __node__0x8051dd0 );

	// Node '0x8051e20'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051e20 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051e48 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8051e20->addAttribute ( __attr__0x8051e48 );
	__node__0x8051d88->addNode ( __node__0x8051e20 );

	// Node '0x8051e68'
	DMLX::Node * __node__0x8051e68 = new DMLX::Node ( " ); conn->Write ( ", false );
	__node__0x8051d88->addNode ( __node__0x8051e68 );

	// Node '0x8051ea8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051ea8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051ed0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051ea8->addAttribute ( __attr__0x8051ed0 );
	__node__0x8051d88->addNode ( __node__0x8051ea8 );

	// Node '0x8051ef0'
	DMLX::Node * __node__0x8051ef0 = new DMLX::Node ( " ); ", false );
	__node__0x8051d88->addNode ( __node__0x8051ef0 );
	__node__0x80518c8->addNode ( __node__0x8051d88 );

	// Node '0x8051f28'
	DMLX::Node * __node__0x8051f28 = new DMLX::Node ( "\n    conn->endSubSection ();\n    return true;\n}\nbool ", false );
	__node__0x80518c8->addNode ( __node__0x8051f28 );

	// Node '0x8051f90'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8051f90 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8051fb8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8051f90->addAttribute ( __attr__0x8051fb8 );
	__node__0x80518c8->addNode ( __node__0x8051f90 );

	// Node '0x8051fd8'
	DMLX::Node * __node__0x8051fd8 = new DMLX::Node ( "::serialize ( Doolp::Connection * conn, Doolp::ObjectParamId paramId )\n{\n    switch ( paramId )\n    { ", false );
	__node__0x80518c8->addNode ( __node__0x8051fd8 );

	// Node '0x8052070'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8052070 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052098 = new DMLX::Attribute ( &__keyword__0x49198152, "Parameter" );
	__node__0x8052070->addAttribute ( __attr__0x8052098 );

	// Node '0x80520b8'
	DMLX::Node * __node__0x80520b8 = new DMLX::Node ( "\n    case ", false );
	__node__0x8052070->addNode ( __node__0x80520b8 );

	// Node '0x80520f0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80520f0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052118 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x80520f0->addAttribute ( __attr__0x8052118 );
	__node__0x8052070->addNode ( __node__0x80520f0 );

	// Node '0x8052138'
	DMLX::Node * __node__0x8052138 = new DMLX::Node ( ": \n      conn->setNextBlockIndex ( ", false );
	__node__0x8052070->addNode ( __node__0x8052138 );

	// Node '0x8052188'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052188 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80521b0 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8052188->addAttribute ( __attr__0x80521b0 );
	__node__0x8052070->addNode ( __node__0x8052188 );

	// Node '0x80521d0'
	DMLX::Node * __node__0x80521d0 = new DMLX::Node ( " ); \n      conn->Write ( ", false );
	__node__0x8052070->addNode ( __node__0x80521d0 );

	// Node '0x8052218'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052218 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052240 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052218->addAttribute ( __attr__0x8052240 );
	__node__0x8052070->addNode ( __node__0x8052218 );

	// Node '0x8052260'
	DMLX::Node * __node__0x8052260 = new DMLX::Node ( " ); break;     ", false );
	__node__0x8052070->addNode ( __node__0x8052260 );
	__node__0x80518c8->addNode ( __node__0x8052070 );

	// Node '0x80522a0'
	DMLX::Node * __node__0x80522a0 = new DMLX::Node ( "\n     ", false );
	__node__0x80518c8->addNode ( __node__0x80522a0 );

	// Node '0x80522d8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x80522d8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052300 = new DMLX::Attribute ( &__keyword__0x49198152, "Link" );
	__node__0x80522d8->addAttribute ( __attr__0x8052300 );

	// Node '0x8052320'
	DMLX::Node * __node__0x8052320 = new DMLX::Node ( "\n    case ", false );
	__node__0x80522d8->addNode ( __node__0x8052320 );

	// Node '0x8052358'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052358 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052380 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8052358->addAttribute ( __attr__0x8052380 );
	__node__0x80522d8->addNode ( __node__0x8052358 );

	// Node '0x80523a0'
	DMLX::Node * __node__0x80523a0 = new DMLX::Node ( ": \n     conn->setNextBlockIndex ( ", false );
	__node__0x80522d8->addNode ( __node__0x80523a0 );

	// Node '0x80523f0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80523f0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052418 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x80523f0->addAttribute ( __attr__0x8052418 );
	__node__0x80522d8->addNode ( __node__0x80523f0 );

	// Node '0x8052438'
	DMLX::Node * __node__0x8052438 = new DMLX::Node ( " ); \n     conn->Write ( ", false );
	__node__0x80522d8->addNode ( __node__0x8052438 );

	// Node '0x8052480'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052480 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80524a8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052480->addAttribute ( __attr__0x80524a8 );
	__node__0x80522d8->addNode ( __node__0x8052480 );

	// Node '0x80524c8'
	DMLX::Node * __node__0x80524c8 = new DMLX::Node ( " ); break;     ", false );
	__node__0x80522d8->addNode ( __node__0x80524c8 );
	__node__0x80518c8->addNode ( __node__0x80522d8 );

	// Node '0x8052508'
	DMLX::Node * __node__0x8052508 = new DMLX::Node ( "\n    default: Bug ( \"Index not handled : 0x%x\\n\", paramId);\n    }\n    return true;\n}\nbool ", false );
	__node__0x80518c8->addNode ( __node__0x8052508 );

	// Node '0x8052590'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052590 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80525b8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052590->addAttribute ( __attr__0x80525b8 );
	__node__0x80518c8->addNode ( __node__0x8052590 );

	// Node '0x80525d8'
	DMLX::Node * __node__0x80525d8 = new DMLX::Node ( "::unserialize ( Doolp::Connection * conn )\n{\n  unsigned int blockIndex;\n  while ( ( blockIndex = conn->getNextBlockIndex () ) )\n  {\n    __DOOLP_Log ( \"Unserialize paramId=0x%x\\n\", blockIndex );\n    switch ( blockIndex )\n    { ", false );
	__node__0x80518c8->addNode ( __node__0x80525d8 );

	// Node '0x80526e8'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x80526e8 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052710 = new DMLX::Attribute ( &__keyword__0x49198152, "Parameter" );
	__node__0x80526e8->addAttribute ( __attr__0x8052710 );

	// Node '0x8052730'
	DMLX::Node * __node__0x8052730 = new DMLX::Node ( "\n      case ", false );
	__node__0x80526e8->addNode ( __node__0x8052730 );

	// Node '0x8052770'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052770 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052798 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x8052770->addAttribute ( __attr__0x8052798 );
	__node__0x80526e8->addNode ( __node__0x8052770 );

	// Node '0x80527b8'
	DMLX::Node * __node__0x80527b8 = new DMLX::Node ( ": \n        conn->Read ( (", false );
	__node__0x80526e8->addNode ( __node__0x80527b8 );

	// Node '0x8052800'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052800 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052828 = new DMLX::Attribute ( &__keyword__0x49198152, "@type" );
	__node__0x8052800->addAttribute ( __attr__0x8052828 );
	__node__0x80526e8->addNode ( __node__0x8052800 );

	// Node '0x8052848'
	DMLX::Node * __node__0x8052848 = new DMLX::Node ( "*)&", false );
	__node__0x80526e8->addNode ( __node__0x8052848 );

	// Node '0x8052880'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052880 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80528a8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052880->addAttribute ( __attr__0x80528a8 );
	__node__0x80526e8->addNode ( __node__0x8052880 );

	// Node '0x80528c8'
	DMLX::Node * __node__0x80528c8 = new DMLX::Node ( " ); break;    ", false );
	__node__0x80526e8->addNode ( __node__0x80528c8 );
	__node__0x80518c8->addNode ( __node__0x80526e8 );

	// Node '0x8052908'
	DMLX::Node * __node__0x8052908 = new DMLX::Node ( "\n      ", false );
	__node__0x80518c8->addNode ( __node__0x8052908 );

	// Node '0x8052940'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8052940 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052968 = new DMLX::Attribute ( &__keyword__0x49198152, "Link" );
	__node__0x8052940->addAttribute ( __attr__0x8052968 );

	// Node '0x8052988'
	DMLX::Node * __node__0x8052988 = new DMLX::Node ( "\n      case ", false );
	__node__0x8052940->addNode ( __node__0x8052988 );

	// Node '0x80529c8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80529c8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80529f0 = new DMLX::Attribute ( &__keyword__0x49198152, "@index" );
	__node__0x80529c8->addAttribute ( __attr__0x80529f0 );
	__node__0x8052940->addNode ( __node__0x80529c8 );

	// Node '0x8052a10'
	DMLX::Node * __node__0x8052a10 = new DMLX::Node ( ": \n        conn->Read ( ", false );
	__node__0x8052940->addNode ( __node__0x8052a10 );

	// Node '0x8052a58'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052a58 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052a80 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052a58->addAttribute ( __attr__0x8052a80 );
	__node__0x8052940->addNode ( __node__0x8052a58 );

	// Node '0x8052aa0'
	DMLX::Node * __node__0x8052aa0 = new DMLX::Node ( " ); break;    ", false );
	__node__0x8052940->addNode ( __node__0x8052aa0 );
	__node__0x80518c8->addNode ( __node__0x8052940 );

	// Node '0x8052ae0'
	DMLX::Node * __node__0x8052ae0 = new DMLX::Node ( "\n      default:\n        ", false );
	__node__0x80518c8->addNode ( __node__0x8052ae0 );

	// Node '0x8052b28'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8052b28 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052b50 = new DMLX::Attribute ( &__keyword__0x49198152, "Inherits" );
	__node__0x8052b28->addAttribute ( __attr__0x8052b50 );

	// Node '0x8052b70'
	DMLX::Node * __node__0x8052b70 = new DMLX::Node ( "if ( this->", false );
	__node__0x8052b28->addNode ( __node__0x8052b70 );

	// Node '0x8052ba8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052ba8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052bd0 = new DMLX::Attribute ( &__keyword__0x49198152, "@class" );
	__node__0x8052ba8->addAttribute ( __attr__0x8052bd0 );
	__node__0x8052b28->addNode ( __node__0x8052ba8 );

	// Node '0x8052bf0'
	DMLX::Node * __node__0x8052bf0 = new DMLX::Node ( "::unserialize ( conn ) == true ) break;\n        ", false );
	__node__0x8052b28->addNode ( __node__0x8052bf0 );
	__node__0x80518c8->addNode ( __node__0x8052b28 );

	// Node '0x8052c50'
	DMLX::Node * __node__0x8052c50 = new DMLX::Node ( "Bug ( \"Index not handled : 0x%x\\n\", blockIndex );\n    }\n  }\n  return true;\n}\n", false );
	__node__0x80518c8->addNode ( __node__0x8052c50 );
	__node__0x804d770->addNode ( __node__0x80518c8 );

	// Node '0x8052cd0'
	DMLX::Node * __node__0x8052cd0 = new DMLX::Node ( "\n/* Parameters Table */\n", false );
	__node__0x804d770->addNode ( __node__0x8052cd0 );
	__node__0x804c5e8->addNode ( __node__0x804d770 );

	// Node '0x8052d18'
	DMLX::Node * __node__0x8052d18 = new DMLX::Node ( " ", false );
	__node__0x804c5e8->addNode ( __node__0x8052d18 );

	// Node '0x8052d50'
	DMLX::Node * __node__0x8052d50 = new DMLX::Node ( "\n", false );
	__node__0x804c5e8->addNode ( __node__0x8052d50 );

	// Node '0x8052d88'
	DMLX::Node * __node__0x8052d88 = new DMLX::Node ( "\n", false );
	__node__0x804c5e8->addNode ( __node__0x8052d88 );

	// Node '0x8052dc0'
	// Node 'xsl:template'
	DMLX::Node * __node__0x8052dc0 = new DMLX::Node ( &__keyword__0xc86f2a9 );
	// Attribute 'match'
	DMLX::Attribute * __attr__0x8052de8 = new DMLX::Attribute ( &__keyword__0x7149518b, "/DoolpObjects/Exception" );
	__node__0x8052dc0->addAttribute ( __attr__0x8052de8 );

	// Node '0x8052e18'
	DMLX::Node * __node__0x8052e18 = new DMLX::Node ( "// Code for exception : ", false );
	__node__0x8052dc0->addNode ( __node__0x8052e18 );

	// Node '0x8052e60'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052e60 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052e88 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8052e60->addAttribute ( __attr__0x8052e88 );
	__node__0x8052dc0->addNode ( __node__0x8052e60 );

	// Node '0x8052ea8'
	DMLX::Node * __node__0x8052ea8 = new DMLX::Node ( "\n  ", false );
	__node__0x8052dc0->addNode ( __node__0x8052ea8 );

	// Node '0x8052ee0'
	// Node 'xsl:for-each'
	DMLX::Node * __node__0x8052ee0 = new DMLX::Node ( &__keyword__0x36662f1e );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052f08 = new DMLX::Attribute ( &__keyword__0x49198152, "Include" );
	__node__0x8052ee0->addAttribute ( __attr__0x8052f08 );

	// Node '0x8052f28'
	DMLX::Node * __node__0x8052f28 = new DMLX::Node ( "\n#include <", false );
	__node__0x8052ee0->addNode ( __node__0x8052f28 );

	// Node '0x8052f60'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8052f60 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8052f88 = new DMLX::Attribute ( &__keyword__0x49198152, "@header" );
	__node__0x8052f60->addAttribute ( __attr__0x8052f88 );
	__node__0x8052ee0->addNode ( __node__0x8052f60 );

	// Node '0x8052fa8'
	DMLX::Node * __node__0x8052fa8 = new DMLX::Node ( ">", false );
	__node__0x8052ee0->addNode ( __node__0x8052fa8 );
	__node__0x8052dc0->addNode ( __node__0x8052ee0 );

	// Node '0x8052fe0'
	DMLX::Node * __node__0x8052fe0 = new DMLX::Node ( "\nDoolp::ExceptionId ", false );
	__node__0x8052dc0->addNode ( __node__0x8052fe0 );

	// Node '0x8053028'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8053028 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8053050 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8053028->addAttribute ( __attr__0x8053050 );
	__node__0x8052dc0->addNode ( __node__0x8053028 );

	// Node '0x8053070'
	DMLX::Node * __node__0x8053070 = new DMLX::Node ( "::getExceptionId () { return ", false );
	__node__0x8052dc0->addNode ( __node__0x8053070 );

	// Node '0x80530c0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80530c0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80530e8 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x80530c0->addAttribute ( __attr__0x80530e8 );
	__node__0x8052dc0->addNode ( __node__0x80530c0 );

	// Node '0x8053108'
	DMLX::Node * __node__0x8053108 = new DMLX::Node ( "; }\nDoolp::Exception * __", false );
	__node__0x8052dc0->addNode ( __node__0x8053108 );

	// Node '0x8053150'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8053150 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8053178 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8053150->addAttribute ( __attr__0x8053178 );
	__node__0x8052dc0->addNode ( __node__0x8053150 );

	// Node '0x8053198'
	DMLX::Node * __node__0x8053198 = new DMLX::Node ( "__constructor () { Log ( \"New exception ", false );
	__node__0x8052dc0->addNode ( __node__0x8053198 );

	// Node '0x80531f0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80531f0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8053218 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80531f0->addAttribute ( __attr__0x8053218 );
	__node__0x8052dc0->addNode ( __node__0x80531f0 );

	// Node '0x8053238'
	DMLX::Node * __node__0x8053238 = new DMLX::Node ( "\\n\" ); return new ", false );
	__node__0x8052dc0->addNode ( __node__0x8053238 );

	// Node '0x8053278'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8053278 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80532a0 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8053278->addAttribute ( __attr__0x80532a0 );
	__node__0x8052dc0->addNode ( __node__0x8053278 );

	// Node '0x80532c0'
	DMLX::Node * __node__0x80532c0 = new DMLX::Node ( "(); }\nbool ", false );
	__node__0x8052dc0->addNode ( __node__0x80532c0 );

	// Node '0x80532f8'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80532f8 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8053320 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80532f8->addAttribute ( __attr__0x8053320 );
	__node__0x8052dc0->addNode ( __node__0x80532f8 );

	// Node '0x8053340'
	DMLX::Node * __node__0x8053340 = new DMLX::Node ( "::__initStatic ( Doolp::Forge * forge )\n  { return forge->getObjectStaticInfo()->addException ( ", false );
	__node__0x8052dc0->addNode ( __node__0x8053340 );

	// Node '0x80533d0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80533d0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80533f8 = new DMLX::Attribute ( &__keyword__0x49198152, "@nameId" );
	__node__0x80533d0->addAttribute ( __attr__0x80533f8 );
	__node__0x8052dc0->addNode ( __node__0x80533d0 );

	// Node '0x8053418'
	DMLX::Node * __node__0x8053418 = new DMLX::Node ( ", \"", false );
	__node__0x8052dc0->addNode ( __node__0x8053418 );

	// Node '0x8053450'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x8053450 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x8053478 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x8053450->addAttribute ( __attr__0x8053478 );
	__node__0x8052dc0->addNode ( __node__0x8053450 );

	// Node '0x8053498'
	DMLX::Node * __node__0x8053498 = new DMLX::Node ( "\", &__", false );
	__node__0x8052dc0->addNode ( __node__0x8053498 );

	// Node '0x80534d0'
	// Node 'xsl:value-of'
	DMLX::Node * __node__0x80534d0 = new DMLX::Node ( &__keyword__0x674c89e0 );
	// Attribute 'select'
	DMLX::Attribute * __attr__0x80534f8 = new DMLX::Attribute ( &__keyword__0x49198152, "@name" );
	__node__0x80534d0->addAttribute ( __attr__0x80534f8 );
	__node__0x8052dc0->addNode ( __node__0x80534d0 );

	// Node '0x8053518'
	DMLX::Node * __node__0x8053518 = new DMLX::Node ( "__constructor ); }\n  ", false );
	__node__0x8052dc0->addNode ( __node__0x8053518 );
	__node__0x804c5e8->addNode ( __node__0x8052dc0 );

	// Node '0x8053560'
	DMLX::Node * __node__0x8053560 = new DMLX::Node ( "\n\n", false );
	__node__0x804c5e8->addNode ( __node__0x8053560 );
	document->addNode ( __node__0x804c5e8 );
	return document;
}
// Done
